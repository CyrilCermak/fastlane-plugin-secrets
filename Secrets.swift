//
//  Autogenerated file by Fastlane-Plugin-Secret
//

import Foundation

class Secrets {
    static let standard = Secrets()
    private let bytes: [[UInt8]] = [[73, 77, 80, 82, 79, 86, 69, 45, 84, 72, 73, 83, 45, 83, 69, 67, 82, 69, 84],
																	 [103, 111, 111, 103, 108, 101, 95, 109, 97, 112, 95, 107, 101, 121],
																	 [8, 15, 19, 22, 10, 16, 2, 101, 29, 2, 2, 31, 96],
																	 [115, 111, 109, 101, 95, 97, 112, 105, 95, 116, 111, 107, 101, 110],
																	 [8, 11, 23, 22, 9, 17, 1, 107, 21, 2, 14, 18, 105, 21, 15, 4, 19, 3, 30]]

    private init() {}

    func string(forKey key: String) -> String? {
        guard let index = bytes.index(where: { String(data: Data(bytes:$0), encoding: .utf8) == key }),
              let value = decrypt(bytes[index + 1]) else { return nil }
        return String(data: Data(bytes: value), encoding: .utf8)
    }

    private func decrypt(_ input: [UInt8]) -> [UInt8]? {
        let key = bytes[0]
        guard !key.isEmpty else { return nil }
        var output = [UInt8]()
        for byte in input.enumerated() {
            output.append(byte.element ^ key[byte.offset % key.count])
        }
        return output
    }
}
